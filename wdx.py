import os
import json
import shutil
import base64
import datetime
import tkinter as tk
from tkinter import ttk, simpledialog, messagebox, filedialog
from pathlib import Path
from zipfile import ZipFile

# ========= KONFIG =========
VERSION = "1.0.0 devbeta"
APP_TITLE = f"wdx {VERSION}"

ICON_BASE64 = ""

# ========= PFAD =========
BASE_PATH = Path(os.path.expandvars(r"%userprofile%\Documents\wdx"))
BASE_PATH.mkdir(parents=True, exist_ok=True)
PROJECTS_FILE = BASE_PATH / "projects.json"

if not PROJECTS_FILE.exists():
    with open(PROJECTS_FILE, "w", encoding="utf-8") as f:
        json.dump([], f, indent=4)

# ========= HILFSFUNKTIONEN =========
def load_projects():
    with open(PROJECTS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_projects(projects):
    with open(PROJECTS_FILE, "w", encoding="utf-8") as f:
        json.dump(projects, f, indent=4)

def create_project_folder(name):
    invalid = '<>:"/\\|?*'
    for c in invalid:
        name = name.replace(c, "_")
    proj_path = BASE_PATH / name
    proj_path.mkdir(exist_ok=True)
    (proj_path / "images").mkdir(exist_ok=True)
    (proj_path / "sites").mkdir(exist_ok=True)
    return name

# ========= APP =========
class WDXApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title(APP_TITLE)

        # Fenster-Icon
        icon_data = base64.b64decode(ICON_BASE64)
        with open("icon_tmp.ico", "wb") as f:
            f.write(icon_data)
        self.iconbitmap("icon_tmp.ico")
        os.remove("icon_tmp.ico")

        self.geometry("800x600")
        self.configure(bg="#f4f4f4")

        # Header
        header = tk.Frame(self, bg="white", relief="raised", height=50)
        header.pack(fill="x", side="top")

        tk.Label(header, text=APP_TITLE, font=("Segoe UI", 14, "bold"), bg="white").pack(side="left", padx=10)

        tk.Button(header, text="Neues Projekt", command=self.new_project,
                  bg="#2563eb", fg="white", relief="flat", padx=10, pady=5).pack(side="left", padx=10, pady=5)

        tk.Button(header, text="Projekt importieren", command=self.import_project,
                  bg="#4b5563", fg="white", relief="flat", padx=10, pady=5).pack(side="left", pady=5)

        # Canvas für Projekt-Kacheln
        self.canvas = tk.Canvas(self, bg="#f4f4f4", highlightthickness=0)
        self.scroll_y = tk.Scrollbar(self, orient="vertical", command=self.canvas.yview)
        self.frame = tk.Frame(self.canvas, bg="#f4f4f4")

        self.frame.bind(
            "<Configure>",
            lambda e: self.canvas.configure(scrollregion=self.canvas.bbox("all"))
        )

        self.canvas.create_window((0, 0), window=self.frame, anchor="nw")
        self.canvas.configure(yscrollcommand=self.scroll_y.set)

        self.canvas.pack(fill="both", expand=True, side="left")
        self.scroll_y.pack(fill="y", side="right")

        self.render_projects()

    def render_projects(self):
        for widget in self.frame.winfo_children():
            widget.destroy()

        projects = load_projects()
        for p in projects:
            self.create_project_tile(p)

    def create_project_tile(self, project):
        tile = tk.Frame(self.frame, bg="white", relief="groove", bd=1)
        tile.pack(fill="x", padx=10, pady=5)

        top = tk.Frame(tile, bg="white")
        top.pack(fill="x", pady=2)
        tk.Label(top, text=f"📄 {project['name']}", font=("Segoe UI", 11, "bold"), bg="white").pack(side="left", padx=5)

        menu_btn = ttk.Menubutton(top, text="⋮")
        menu = tk.Menu(menu_btn, tearoff=0)
        menu.add_command(label="Umbenennen", command=lambda: self.rename_project(project))
        menu.add_command(label="Bearbeiten", command=lambda: self.edit_project(project))
        menu.add_command(label="Löschen", command=lambda: self.delete_project(project))
        menu.add_command(label="Exportieren", command=lambda: self.export_project(project))
        menu_btn["menu"] = menu
        menu_btn.pack(side="right", padx=5)

        tk.Label(tile, text=project["description"], bg="white", fg="#4b5563", anchor="w", wraplength=600).pack(fill="x", padx=5)

        footer = tk.Frame(tile, bg="white")
        footer.pack(fill="x", pady=(4, 2))
        created = project["created"].split("T")[0]
        modified = project.get("modified_minutes", 0)
        tk.Label(footer, text=f"📅 {created} | ⏱️ {modified} min", bg="white", fg="#9ca3af", anchor="w").pack(side="left", padx=5)

    def new_project(self):
        name = simpledialog.askstring("Neues Projekt", "Projektname:")
        if not name:
            return
        desc = simpledialog.askstring("Projektbeschreibung", "Beschreibung:")
        name = create_project_folder(name)
        project = {
            "name": name,
            "description": desc or "",
            "created": datetime.datetime.now().isoformat(),
            "modified_minutes": 0
        }
        projects = load_projects()
        projects.append(project)
        save_projects(projects)
        self.render_projects()

    def rename_project(self, project):
        new_name = simpledialog.askstring("Umbenennen", "Neuer Projektname:", initialvalue=project["name"])
        if not new_name:
            return
        old_path = BASE_PATH / project["name"]
        new_name = create_project_folder(new_name)
        new_path = BASE_PATH / new_name
        shutil.move(old_path, new_path)
        project["name"] = new_name
        save_projects(load_projects())
        self.render_projects()

    def edit_project(self, project):
        new_desc = simpledialog.askstring("Beschreibung bearbeiten", "Projektbeschreibung:",
                                          initialvalue=project["description"])
        if new_desc is not None:
            projects = load_projects()
            for p in projects:
                if p["name"] == project["name"]:
                    p["description"] = new_desc
                    break
            save_projects(projects)
            self.render_projects()

    def delete_project(self, project):
        if messagebox.askyesno("Löschen bestätigen", f"Soll das Projekt '{project['name']}' wirklich gelöscht werden?"):
            shutil.rmtree(BASE_PATH / project["name"], ignore_errors=True)
            projects = [p for p in load_projects() if p["name"] != project["name"]]
            save_projects(projects)
            self.render_projects()

    def export_project(self, project):
        zip_path = BASE_PATH / f"{project['name']}.wdx"
        proj_path = BASE_PATH / project["name"]
        with ZipFile(zip_path, "w") as zipf:
            for root, dirs, files in os.walk(proj_path):
                for file in files:
                    full_path = os.path.join(root, file)
                    rel_path = os.path.relpath(full_path, BASE_PATH)
                    zipf.write(full_path, rel_path)
        messagebox.showinfo("Exportiert", f"Projekt exportiert nach:\n{zip_path}")

    def import_project(self):
        path = filedialog.askopenfilename(filetypes=[("wdx-Dateien", "*.wdx *.zip *.wdx.zip")])
        if not path:
            return
        with ZipFile(path, "r") as zipf:
            zipf.extractall(BASE_PATH)
        self.render_projects()

# ========= START =========
if __name__ == "__main__":
    app = WDXApp()
    app.mainloop()
